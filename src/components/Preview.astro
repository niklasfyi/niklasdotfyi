---
import { type CollectionEntry, render } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import type { HTMLTag, Polymorphic } from "astro/types";
import { getEntryParams } from "@/utils/params";
import { Icon } from 'astro-icon/components'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	entry: CollectionEntry<"note"> | CollectionEntry<"article">;
};

const { entry } = Astro.props;
const { Content } = await render(entry);

const { path } = getEntryParams(entry);
const isArticle = entry.collection === "article";
---

<article class="post-preview shadow-(--box-shadow)">
	{isArticle && (
		<header class="mb-3">
			{entry.data.draft && <span class="text-red-500">(Draft) </span>}
			<h3 class="text-lg font-semibold">
				<a class="custom-link" data-astro-prefetch href={`/${path}/`}>
					{entry.data.title}
				</a>
			</h3>
		</header>
	)}
	<div class="prose prose-sm mt-4 line-clamp-6 max-w-none [&>p:last-of-type]:mb-0">
		{entry.data.description ? (
			<p>{entry.data.description}</p>
		) : (
			<Content />
		)}
	</div>
	<footer class="text-right text-xs">
		<span class="text-(--color-global-text)">
			{isArticle ? (
					<Icon name="ph:newspaper" class="inline w-4 h-4 mr-1" />
			) : (
					<Icon name="ph:note" class="inline w-4 h-4 mr-1" />
			)}
		</span> - 
		<a class="custom-link text-(--color-secondary-text)" href={`/${path}/`}>
			<FormattedDate date={entry.data.date} />
		</a>
	</footer>
</article>
