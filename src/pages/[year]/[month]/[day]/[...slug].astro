---
import { type CollectionEntry, getCollection, render } from "astro:content";
import PostLayout from "@/layouts/Post.astro";
import { getEntryParams } from "@/utils/params";
import { getAllArticles } from "@/utils/article";

export async function getStaticPaths() {
	const allArticles = await getAllArticles();
	const allNotes = await getCollection("note");
	const allCheckins = await getCollection("checkin");
	const allBookmarks = await getCollection("bookmark");

	// Add new collections conditionally (try-catch to avoid build errors)
	let allPhotos: CollectionEntry<"photo">[] = [];
	let allReplies: CollectionEntry<"reply">[] = [];
	let allLikes: CollectionEntry<"like">[] = [];
	let allRsvps: CollectionEntry<"rsvp">[] = [];

	try {
		allPhotos = await getCollection("photo");
	} catch (e) {
		console.warn("Could not load photo collection:", e);
	}

	try {
		allReplies = await getCollection("reply");
	} catch (e) {
		console.warn("Could not load reply collection:", e);
	}

	try {
		allLikes = await getCollection("like");
	} catch (e) {
		console.warn("Could not load like collection:", e);
	}

	try {
		allRsvps = await getCollection("rsvp");
	} catch (e) {
		console.warn("Could not load rsvp collection:", e);
	}

	// Combine all posts
	const allPosts = [
		...allArticles.map((post) => ({ post, type: "article" })),
		...allNotes.map((post) => ({ post, type: "note" })),
		...allCheckins.map((post) => ({ post, type: "checkin" })),
		...allBookmarks.map((post) => ({ post, type: "bookmark" })),
		...allPhotos.map((post) => ({ post, type: "photo" })),
		...allReplies.map((post) => ({ post, type: "reply" })),
		...allLikes.map((post) => ({ post, type: "like" })),
		...allRsvps.map((post) => ({ post, type: "rsvp" })),
	];

	return allPosts.map(({ post, type }) => ({
		params: getEntryParams(post),
		props: { post, type },
	}));
}

const { post, type } = Astro.props;
const { Content } = await render(post);
---

{
	type === "article" ? (
		<PostLayout post={post as CollectionEntry<"article">}>
			<Content />
		</PostLayout>
	) : type === "checkin" ? (
		<PostLayout post={post as CollectionEntry<"checkin">}>
			<Content />
		</PostLayout>
	) : type === "note" ? (
		<PostLayout post={post as CollectionEntry<"note">}>
			<Content />
		</PostLayout>
	) : type === "bookmark" ? (
		<PostLayout post={post as CollectionEntry<"bookmark">}>
			<Content />
		</PostLayout>
	) : type === "photo" ? (
		<PostLayout post={post as CollectionEntry<"photo">}>
			<Content />
		</PostLayout>
	) : type === "reply" ? (
		<PostLayout post={post as CollectionEntry<"reply">}>
			<Content />
		</PostLayout>
	) : type === "like" ? (
		<PostLayout post={post as CollectionEntry<"like">}>
			<Content />
		</PostLayout>
	) : type === "rsvp" ? (
		<PostLayout post={post as CollectionEntry<"rsvp">}>
			<Content />
		</PostLayout>
	) : null
}
