---
import { type CollectionEntry, getCollection } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import Preview from "@/components/Preview.astro";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import { getAllArticles } from "@/utils/article";
import type { GetStaticPaths, Page } from "astro";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	const allArticles = await getAllArticles();
	const allNotes = await getCollection("note");

	// Combine all entries and add type information
	const allEntries = [
		...allArticles.map((entry) => ({ ...entry, type: "article" })),
		...allNotes.map((entry) => ({ ...entry, type: "note" })),
	];

	const sortedEntries = allEntries.sort(collectionDateSort);

	// Get all unique tags from both articles and notes
	const allTags = new Set<string>();
	sortedEntries.forEach((entry) => {
		if (entry.data.tags) {
			entry.data.tags.forEach((tag: string) => allTags.add(tag));
		}
	});

	const uniqueTags = Array.from(allTags);

	// Add untagged entries
	const untaggedEntries = sortedEntries.filter(
		(entry) => !entry.data.tags || entry.data.tags.length === 0,
	);

	const tagPages = uniqueTags.flatMap((tag) => {
		const filterEntries = sortedEntries.filter(
			(entry) => entry.data.tags && entry.data.tags.includes(tag),
		);
		return paginate(filterEntries, {
			pageSize: 10,
			params: { tag },
		});
	});

	// Add untagged pages if there are untagged entries
	const untaggedPages =
		untaggedEntries.length > 0
			? paginate(untaggedEntries, {
					pageSize: 10,
					params: { tag: "untagged" },
				})
			: [];

	return [...tagPages, ...untaggedPages];
};

interface Props {
	page: Page<CollectionEntry<"article"> | CollectionEntry<"note">>;
}

const { page } = Astro.props;
const { tag } = Astro.params;

const meta = {
	description:
		tag === "untagged" ? "View all content without tags" : `View all content with the tag - ${tag}`,
	title: tag === "untagged" ? "Untagged Posts" : `Tag: ${tag}`,
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: "← Previous Tags",
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: "Next Tags →",
			url: page.url.next,
		},
	}),
};
---

<PageLayout meta={meta}>
	<section>
		<div class="mb-6 flex items-center">
			<h1 class="sr-only">
				{tag === "untagged" ? "Content without tags" : `Content with the tag ${tag}`}
			</h1>
			<a class="title text-accent" href="/tags/"><span class="sr-only">All {" "}</span>Tags</a>
			<span aria-hidden="true" class="ms-2 me-3 text-xl">→</span>
			<span aria-hidden="true" class="text-xl">{tag === "untagged" ? "Untagged" : `#${tag}`}</span>
		</div>
		<div class="space-y-3" role="list">
			{
				page.data.map((entry, index) => (
					<>
						<Preview entry={entry} />
						{index < page.data.length - 1 && (
							<hr class="mx-auto h-0.5 w-10 border-0 bg-(--color-divider)" />
						)}
					</>
				))
			}
		</div>
		<div class="mt-8">
			<Pagination {...paginationProps} />
		</div>
	</section>
</PageLayout>
